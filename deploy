#!/usr/bin/env bash
################################################################### SETUP ########################################################################
if ! _SCRIPT_DIR="$(get_script_dir "${BASH_SOURCE[0]}")"; then echo "Error while running: _SCRIPT_DIR=\"\$(get_script_dir \"${BASH_SOURCE[0]}\")\"" && exit 1; fi
set -o errexit -o errtrace -o nounset
##################################################################################################################################################
# shellcheck disable=SC2155
export GPG_TTY="$(tty)"

################################################################### USAGE ########################################################################
_SCRIPT_NAME="$(basename "$0")"

function _usage() {
  cat << EOF
NAME
       ${_SCRIPT_NAME}

SYNOPSIS
       ${_SCRIPT_NAME} [--help] [--debug] [--verbose] [--auto-confirm]

EXAMPLES
       ${_SCRIPT_NAME}
       ${_SCRIPT_NAME} --auto-confirm
EOF
}
##################################################################################################################################################

################################################################# SCRIPTARGS #####################################################################
while test $# -gt 0; do
  case "$1" in
    -h | --help)
      _usage
      exit 0
      ;;
    --debug)
      shift
      export debug_mode=true
      ;;
    --verbose)
      shift
      export verbose=true
      ;;
    --auto-confirm)
      shift
      export auto_confirm=true
      ;;
    --)
      shift
      break
      ;;
    -*)
      echo "Unknown option: $1"
      _usage
      exit 1
      ;;
    *)
      break
      ;;
  esac
done
##################################################################################################################################################

function exiting() {
  echo "Exiting..."
  exit "${1:-1}"
}
function confirm() {
  local response=""
  read -r -p "${1:-Are you sure?}"$'\n'"[Y/n]> " response
  case $response in
    [yY][eE][sS] | [yY] | "") true ;;
    [nN][oO] | [nN]) false ;;
    *)
      echo "Incorrect value entered... Try again."
      confirm "$@"
      ;;
  esac
}
function confirm_with_auto() {
  if test "${auto_confirm:-}" = 'true'; then
    echo "AUTO CONFIRMED: ${1:-}"
    return 0
  fi
  confirm "$@"
}

function check_git_default_branch() {
  if git is-side-branch; then
    echo "Git repo not on master branch! Make a PR to master first"
    git status
    exit 1
  fi
  return 0
}

function check_git_dirty() {
  if git is-dirty; then
    echo "Git repo is dirty!"
    git status
    exit 1
  fi
  return 0
}

function publish_and_tag() {
  check_git_dirty
  make version-release
  VERS="v$(make echo-version-current)"
  export VERS

  if ! confirm_with_auto "Commit, tag, and deploy version ${VERS}?"; then
    exiting 1
  fi

  git commit -m "$VERS" -- pom.xml
  git tag "$VERS"
  make deploy
}

function push_published() {
  if ! confirm_with_auto "Push updates for version ${VERS}?"; then
    exiting 1
  fi

  git push
  git push --tags
}

function next_vers() {
  if ! confirm_with_auto "Bump ${VERS} to next minor version?"; then
    exiting 0
  fi
  check_git_dirty

  make version-bump-minor
  NEXT_RELEASE_VERS="v$(make echo-version-current)"
  make version-snapshot
  SNAPSHOT_VERS="v$(make echo-version-current)"
  export NEXT_RELEASE_VERS SNAPSHOT_VERS

  if ! confirm_with_auto "Push updates for next minor version ${SNAPSHOT_VERS}?"; then
    exiting 1
  fi

  git commit -m "Prepare next version" -- pom.xml
  git push
}

function next_vers_branch() {
  NEXT_BRANCH="dev-${NEXT_RELEASE_VERS}"

  if ! confirm_with_auto "Create new development branch for next version: ${NEXT_BRANCH}?"; then
    exiting 0
  fi

  git checkout -b "$NEXT_BRANCH"
  git push --set-upstream origin "$NEXT_BRANCH"
}

cd "$_SCRIPT_DIR"

check_git_default_branch
check_git_dirty
publish_and_tag
push_published
next_vers
next_vers_branch
